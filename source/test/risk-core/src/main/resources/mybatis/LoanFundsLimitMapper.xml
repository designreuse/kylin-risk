<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="LoanFundsLimit" >
  <resultMap id="loanFundsLimitMap" type="LoanFundsLimit" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="repayyear" property="repayyear" jdbcType="FLOAT" />
    <result column="annualsales" property="annualsales" jdbcType="INTEGER" />
    <result column="profilerate" property="profilerate" jdbcType="VARCHAR" />
    <result column="ebitda" property="ebitda" jdbcType="DECIMAL" />
    <result column="companytype" property="companytype" jdbcType="VARCHAR" />
    <result column="loanlimit" property="loanlimit" jdbcType="DECIMAL" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" javaType="DateTime"/>
    <result column="updatetime" property="updatetime" jdbcType="TIMESTAMP" javaType="DateTime"/>
  </resultMap>
  <sql id="columnList" >
    id, repayyear, annualsales, profilerate, ebitda, companytype, loanlimit, createtime, updatetime
  </sql>
  <select id="get" resultMap="loanFundsLimitMap" parameterType="integer" >
    select
    <include refid="columnList" />
    from risk_loanfunds_limit
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="queryAll" resultMap="loanFundsLimitMap">
    select
    id,loanlimit,repayyear
    from risk_loanfunds_limit ORDER BY repayyear DESC,loanlimit;
  </select>

  <select id="queryLoanSales" resultMap="loanFundsLimitMap">
  select
  distinct annualsales,companytype,profilerate,ebitda
  from risk_loanfunds_limit
  ORDER BY annualsales,companytype;
  </select>

  <select id="queryRepayYears" resultMap="loanFundsLimitMap">
      select distinct repayyear from risk_loanfunds_limit;
  </select>

  <delete id="delete" parameterType="integer" >
    delete from risk_loanfunds_repayyear
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <insert id="insert" parameterType="LoanFundsLimit" >
    insert into risk_loanfunds_limit (id, repayyear, annualsales,
      profilerate, ebitda, companytype,
      loanlimit, createtime, updatetime
      )
    values (#{id,jdbcType=INTEGER}, #{repayyear,jdbcType=FLOAT}, #{annualsales,jdbcType=INTEGER},
      #{profilerate,jdbcType=VARCHAR}, #{ebitda,jdbcType=DECIMAL}, #{companytype,jdbcType=VARCHAR},
      #{loanlimit,jdbcType=DECIMAL}, #{createtime,jdbcType=TIMESTAMP}, #{updatetime,jdbcType=TIMESTAMP}
      )
  </insert>

  <update id="update" parameterType="LoanFundsLimit" >
    update risk_loanfunds_limit
    set repayyear = #{repayyear,jdbcType=FLOAT},
      annualsales = #{annualsales,jdbcType=INTEGER},
      profilerate = #{profilerate,jdbcType=VARCHAR},
      ebitda = #{ebitda,jdbcType=DECIMAL},
      companytype = #{companytype,jdbcType=VARCHAR},
      loanlimit = #{loanlimit,jdbcType=DECIMAL},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      updatetime = #{updatetime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <update id="updateBatchSalesByType" parameterType="list">
    update risk_loanfunds_limit set
    annualsales=
    <foreach collection="list" item="item" index="index" separator=" " open="case companytype" close="end">
      when #{item.companytype,jdbcType=VARCHAR} then #{item.annualsales,jdbcType=INTEGER}
    </foreach>
    , ebitda =
    <foreach collection="list" item="item" index="index" separator=" " open="case companytype" close="end">
      when #{item.companytype,jdbcType=VARCHAR} then #{item.ebitda,jdbcType=DECIMAL}
    </foreach>
    , profilerate =
    <foreach collection="list" item="item" index="index" separator=" " open="case companytype" close="end">
      when #{item.companytype,jdbcType=VARCHAR} then #{item.profilerate,jdbcType=VARCHAR}
    </foreach>
    where companytype in
    <foreach collection="list" index="index" item="item" separator="," open="(" close=")">
      #{item.companytype,jdbcType=VARCHAR}
    </foreach>
  </update>

  <update id="updateBatchLimitById" parameterType="list">
    update risk_loanfunds_limit set
    loanlimit=
    <foreach collection="list" item="item" index="index" separator=" " open="case ID" close="end">
      when #{item.id,jdbcType=INTEGER} then #{item.loanlimit,jdbcType=DECIMAL}
    </foreach>
    where id in
    <foreach collection="list" index="index" item="item" separator="," open="(" close=")">
      #{item.id,jdbcType=INTEGER}
    </foreach>
  </update>

</mapper>