import java.util.regex.Pattern

apply plugin: "propdeps-maven"

install {
  repositories.mavenInstaller {
    customizePom(pom, project)
  }
}

def getRepositoryURL(){
  def distributionRepositoryURL = null;
  if (hasProperty("repositoryURL")) {
    distributionRepositoryURL = project["repositoryURL"]
  } else {
    if (isSnapshot()) {
      distributionRepositoryURL = "http://121.40.68.238:8081/nexus/content/repositories/snapshots/"
    } else {
      distributionRepositoryURL = "http://121.40.68.238:8081/nexus/content/repositories/releases/"
    }
  }
  return distributionRepositoryURL;
}



uploadArchives {
  repositories {
    mavenDeployer {
      repository(url: getRepositoryURL()) {
        authentication(userName: defaultProperty("nexusUserName", null),
                password: defaultProperty("nexusPassword", null))
      }
      customizePom(pom, project)
    }
  }
}

def isSnapshot() {
  def SNAPSHOT_TIMESTAMP = Pattern.compile("^(.*-)?([0-9]{8}\\.[0-9]{6}-[0-9]+)\$");
  return module.version.endsWith("SNAPSHOT") || SNAPSHOT_TIMESTAMP.matcher(module.version).matches();
}

def customizePom(pom, gradleProject) {
  pom.whenConfigured { generatedPom ->
    // eliminate test-scoped dependencies (no need in maven central poms)
    generatedPom.dependencies.removeAll { dep ->
      dep.scope == "test"
    }

    // sort to make pom dependencies order consistent to ease comparison of older poms
    generatedPom.dependencies = generatedPom.dependencies.sort { dep ->
      "$dep.scope:$dep.groupId:$dep.artifactId"
    }

    // add all items necessary for maven central publication
    generatedPom.project {
      name = gradleProject.description
      description = gradleProject.description
    }
  }
}

def defaultProperty(propertyName, defaultValue) {
  return hasProperty(propertyName) ? project[propertyName] : defaultValue
}

