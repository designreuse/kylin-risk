<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
    xsi:schemaLocation="
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://mybatis.org/schema/mybatis-spring
		http://mybatis.org/schema/mybatis-spring.xsd">


  <!--Database Begin-->
  <!--metric-->
  <!--<bean id="metric" class="com.codahale.metrics.MetricRegistry" scope="singleton"/>-->
  <!--<bean id="consoleAgent" class="com.rkylin.risk.core.monitor.agent.ConsoleAgent">-->
  <!--<constructor-arg index="0" name="metricRegistry" ref="metric"></constructor-arg>-->
  <!--</bean>-->
  <!--<bean id="jmxAgent" class="com.rkylin.risk.core.monitor.agent.JMXAgent">-->
  <!--<constructor-arg index="0" name="metricRegistry" ref="metric"></constructor-arg>-->
  <!--</bean>-->
  <!--<bean id="healthCheckRegistry" class="com.codahale.metrics.health.HealthCheckRegistry" scope="singleton"/>-->
  <!-- 配置hikari数据源 -->
  <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
    <constructor-arg>
      <bean class="com.zaxxer.hikari.HikariConfig">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- <property name="autoCommit" value="true"/> -->
        <property name="poolName" value="risk"/>
        <property name="connectionTimeout" value="${jdbc.connectionTimeout:30000}"/>
        <property name="idleTimeout" value="${jdbc.idleTimeout:600000}"/>
        <property name="maxLifetime" value="${jdbc.maxLifetime:1800000}"/>
        <property name="maximumPoolSize" value="${jdbc.maximumPoolSize:100}"/>
        <property name="minimumIdle" value="${jdbc.minimumIdle:10}"/>
        <!-- <property name="metricRegistry" ref="metric"/> -->
        <!-- <property name="healthCheckRegistry" ref="healthCheckRegistry"></property>-->
        <property name="connectionTestQuery" value="SELECT 1"/>
      </bean>
    </constructor-arg>
  </bean>
  <!--Database End-->

  <!-- Scans for application @Components to deploy -->
  <context:component-scan
      base-package="com.rkylin.risk.core.dao.impl,com.rkylin.risk.core.service.impl"
      name-generator="com.rkylin.risk.core.common.AnnotationBeanNameDependInterfaceGenerator"/>


  <!-- 使用JDBC事物 -->
  <bean id="transactionManager"
      class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- AOP配置事物 -->
  <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="query*" isolation="READ_COMMITTED" read-only="true" propagation="REQUIRED"/>
      <tx:method name="delete*" isolation="READ_COMMITTED" propagation="REQUIRED"/>
      <tx:method name="update*" isolation="READ_COMMITTED" propagation="REQUIRED"/>
      <tx:method name="insert*" isolation="READ_COMMITTED" propagation="REQUIRED"/>
      <tx:method name="add*" isolation="READ_COMMITTED" propagation="REQUIRED"/>
      <tx:method name="*" propagation="SUPPORTS"/>
    </tx:attributes>
  </tx:advice>

  <!-- 配置AOP切面 -->
  <aop:config proxy-target-class="true">
    <aop:pointcut id="transactionPointcut"
        expression="execution(public * com.rkylin.risk.core.service.impl.*Impl.*(..))"/>
    <aop:advisor pointcut-ref="transactionPointcut"
        advice-ref="transactionAdvice"/>
  </aop:config>

  <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

  <!-- 使用annotation注解方式配置事务 -->
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

  <bean id="mybatisConfigration" class="org.apache.ibatis.session.Configuration">
    <property name="autoMappingBehavior" value="PARTIAL"/>
    <property name="cacheEnabled" value="${mybatis.cacheEnabled:true}"/>
    <!-- 这个配置设定全局是否启动或者禁用延迟加载（默认true） -->
    <property name="lazyLoadingEnabled" value="false"/>
    <!-- 当启用延迟加载时，默认为true启动即加载，false是当使用时才加载 -->
    <property name="aggressiveLazyLoading" value="false"/>
    <!-- 是否允许多个结果集从一个单独的语句返回 默认true -->
    <property name="multipleResultSetsEnabled" value="true"/>
    <!-- 使用列标签代替列名 默认为true -->
    <property name="useColumnLabel" value="true"/>
    <!-- 允许jdbc生成主键 默认为false -->
    <property name="useGeneratedKeys" value="true"/>
    <!-- MyBatis 默认的执行器 SIMPLE 简单映射 、REUSE重用预处理语句、BATCH 重用预处理语句和批量更新 -->
    <property name="defaultExecutorType" value="${mybatis.executorType:SIMPLE}"/>
    <!-- 设置超时时间，它决定驱动等待一个数据库响应的时间。 -->
    <property name="defaultStatementTimeout" value="${mybatis.statementTimeout:30000}"/>
        <property name="localCacheScope" value="${mybatis.localCacheScope:STATEMENT}"/>
  </bean>
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="configuration" ref="mybatisConfigration"/>
    <property name="mapperLocations" value="classpath:/mybatis/*.xml"/>
        <property name="typeAliasesPackage" value="com.rkylin.risk.commons.entity,com.rkylin.risk.core.entity,com.rkylin.risk.core.enumtype"/>
    <property name="typeAliases">
      <array value-type="java.lang.Class">
        <value>org.joda.time.LocalDate</value>
        <value>org.joda.time.DateTime</value>
      </array>
    </property>
    <property name="typeHandlersPackage" value="com.rkylin.risk.core.mybatis.handler"/>
    <property name="plugins">
      <array value-type="org.apache.ibatis.plugin.Interceptor">
        <bean class="com.github.pagehelper.PageHelper">
          <property name="properties">
            <props>
              <prop key="dialect">mysql</prop>
              <prop key="offsetAsPageNum">false</prop>
              <prop key="rowBoundsWithCount">true</prop>
              <prop key="pageSizeZero">false</prop>
              <prop key="reasonable">false</prop>
            </props>
          </property>
        </bean>
      </array>
    </property>
  </bean>

  <!-- 配置SQLSession模板 -->
  <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
    <constructor-arg index="0" ref="sqlSessionFactory"/>
  </bean>

</beans>